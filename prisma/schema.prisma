generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONECTION_STRING")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]

  @@index([name(sort: Desc)])
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]

  @@index([name(sort: Desc)])
}

model Post {
  id              Int       @id @default(autoincrement())
  title           String
  content         String
  images          String[]
  tags            Tag[]
  author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments        Comment[]
  slug            String    @unique
  category        Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      Int
  authorId        Int
  createdAt       DateTime  @default(now())
  backgroundImage String
  likes           Like[]
  views           Views[]
  description     String
  likesCount      Int       @default(0)
  dislikesCount   Int       @default(0)

  @@index([title, description, createdAt(sort: Desc)])
}

model Views {
  id        Int      @id @default(autoincrement())
  IPAddress String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Like {
  id     Int      @id @default(autoincrement())
  isLike Boolean?
  userId Int
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId Int
  post   Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  lastName  String
  firstName String
  password  String
  avatarUrl String
  joinedAt  DateTime  @default(now())
  blog      String    @unique
  bio       String?
  profile   String?
  comments  Comment[]
  likes     Like[]
  posts     Post[]
  contents  Content[]

  @@index([blog, joinedAt(sort: Desc)])
}

model Content {
  id       Int      @id @default(autoincrement())
  markdown String
  authorId Int
  author   User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  files    String[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}
