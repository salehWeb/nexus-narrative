generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_CONECTION_STRING")
}

model Category {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]

  @@index([name(sort: Desc)])
}

model Tag {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]

  @@index([name(sort: Desc)])
}

model Post {
  id              Int       @id @default(autoincrement())
  title           String
  content         String
  images          String[]
  tags            Tag[]
  author          User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments        Comment[]
  slug            String    @unique
  category        Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId      Int
  authorId        Int
  createdAt       DateTime  @default(now())
  backgroundImage String
  likes           Like[]
  views           Views[]
  description     String

  @@index([title, description, createdAt(sort: Desc)])
}

model Views {
  id        Int      @id @default(autoincrement())
  IPAddress String
  postId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  monthAndYear String
}

model Like {
  id        Int     @id @default(autoincrement())
  userId    Int
  isLike    Boolean @default(false)
  isDislike Boolean @default(false)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    Int
  post      Post    @relation(fields: [postId], references: [id], onDelete: Cascade)
}

model User {
  id          Int       @id @default(autoincrement())
  email       String    @unique
  createdAt   DateTime  @default(now())
  lastName    String
  firstName   String
  password    String
  comments    Comment[]
  Likes       Like[]
  posts       Post[]
  profile     String?
  about       String?
  blogName    String    @unique
  title       String?
  phoneNumber Int?
  country     String?
  city        String?

  @@index([blogName, createdAt(sort: Desc)])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  authorId  Int
  postId    Int
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
}
